import java.io.*;
import java.util.*;


public class Main {
    static int N, M;
    static int[][] map;
    static int count = 0;
    static int[] dx = {-1, 0, 1, 0};
    static int[] dy = {0, 1, 0, -1};



    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());

        st = new StringTokenizer(br.readLine());
        int r = Integer.parseInt(st.nextToken());
        int c = Integer.parseInt(st.nextToken());
        int dir = Integer.parseInt(st.nextToken());

        map = new int[N][M];
        for(int i=0;i<N;i++) {
            st = new StringTokenizer(br.readLine());
            for(int j=0;j<M;j++) {
                map[i][j] = Integer.parseInt(st.nextToken());
            }
        }

        clean(r,c,dir);
        System.out.println(count);
    }


    public static void clean(int x, int y, int dir) {
        if(map[x][y] == 0) { 
            map[x][y] = -1;
            count++;
        }
    
    boolean found = false;
    for(int i = 0; i < 4; i++) {
        int ndir = (dir + 3 - i) % 4; 
        int nx = x + dx[ndir];
        int ny = y + dy[ndir];
        if(nx >= 0 && ny >= 0 && nx < N && ny < M && map[nx][ny] == 0) {
            found = true;
            clean(nx, ny, ndir);
            break;
        }
    }

    if(!found) {
        int backDir = (dir + 2) % 4;
        int bx = x + dx[backDir];
        int by = y + dy[backDir];
        if(bx >= 0 && by >= 0 && bx < N && by < M && map[bx][by] != 1) {
            clean(bx, by, dir);
        }
        
    }
}
    
    
}
