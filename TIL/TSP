# TSP와 MST 알고리즘 비교 및 설명

## 1. 문제 정의

### TSP (Traveling Salesman Problem, 외판원 문제)
- **모든 정점을 한 번씩 방문**하고, **시작점으로 다시 돌아오는** 최단 경로를 찾는 문제.
- 순회 경로가 필요할 때 사용 (예: 실제 배송 경로, 관광 코스, 순찰 등).

### MST (Minimum Spanning Tree, 최소 신장 트리)
- **모든 정점을 최소 비용으로 연결**하는 트리를 만드는 문제.
- 사이클(순환) 없이 모든 정점이 연결되는 네트워크를 구축할 때 사용 (예: 통신망, 전력망, 도로망 등).

---

## 2. 알고리즘 특징

| 구분       | TSP                                    | MST                                      |
|------------|----------------------------------------|------------------------------------------|
| 목적       | 모든 정점 순회 후 시작점 복귀           | 모든 정점을 최소 비용으로 연결           |
| 구조       | 사이클(순환)                           | 트리(비순환)                             |
| 시간복잡도 | 매우 높음 (N!)                         | 낮음 (O(E log V), 프림/크루스칼 등)      |
| 결과       | 순회 경로                              | 연결 네트워크(트리)                      |
| 용도       | 경로 최적화, 배송, 투어                | 네트워크 연결, 통신망, 전력망 등         |
| 단점       | 큰 입력에서 계산량 폭증                | 경로 최적화에는 부적합                   |

---

## 3. 실제 예시

### TSP 예시
- 도시가 4개 있을 때, 모든 도시를 한 번씩 방문하고 시작 도시로 돌아오는 가장 짧은 경로를 찾는다.
- 경로 예: A → B → C → D → A

### MST 예시
- 도시가 4개 있을 때, 모든 도시를 최소 비용으로 연결하여 사이클 없는 네트워크를 구성한다.
- 연결 예: A—B, B—C, C—D (최소 비용 간선만 사용, 사이클 없음)

---

## 4. 장단점

### TSP
- **장점:** 실제 이동, 순회, 방문 경로 최적화에 적합
- **단점:** NP-hard 문제로, 완전탐색은 N! 시간복잡도, 큰 입력에 매우 비효율적

### MST
- **장점:** 네트워크 구축, 연결 비용 최소화, 빠른 알고리즘 사용 가능
- **단점:** 순회 경로가 필요할 경우 부적합, 트리 구조이기 때문에 시작점 복귀 보장 X

---

## 5. 대표 알고리즘

### TSP
- 완전탐색 (DFS/백트래킹, 작은 N에서만 사용)
- 동적 프로그래밍 (Held-Karp 알고리즘)
- 휴리스틱, 근사 알고리즘 (큰 N에서 실용적으로 사용)

### MST
- 프림 알고리즘
- 크루스칼 알고리즘
- 유니온-파인드 자료구조 활용

---

## 6. 코드 예시

### MST (프림 알고리즘)
```java
// MST(프림 알고리즘) 예시
for (int i = 0; i < N; i++) {
    double min = Double.MAX_VALUE;
    int minIdx = -1;
    for (int j = 0; j < N; j++) {
        if (!visited[j] && minEdge[j] < min) {
            min = minEdge[j];
            minIdx = j;
        }
    }
    visited[minIdx] = true;
    result += min;
    for (int j = 0; j < N; j++) {
        if (!visited[j]) {
            double dist = getDist(minIdx, j);
            if (minEdge[j] > dist) {
                minEdge[j] = dist;
            }
        }
    }
}
```

### TSP (DFS 완전탐색, 작은 N)
```java
static void dfs(int depth, int last, double cost) {
    if (depth == N) {
        minCost = Math.min(minCost, cost + getDist(last, 0)); // 시작점 복귀
        return;
    }
    for (int i = 0; i < N; i++) {
        if (!visited[i]) {
            visited[i] = true;
            dfs(depth + 1, i, cost + getDist(last, i));
            visited[i] = false;
        }
    }
}
```

---

## 7. 언제 어떤 알고리즘을 사용할까?

- **경로 최적화/순회**: TSP (예: 드론 배송, 기사 동선, 관광 루트)
- **네트워크 연결/최소 비용**: MST (예: 인터넷 케이블, 전력망 구축)

---

## 8. 참고

- MST는 큰 그래프에도 빠르게 적용 가능.
- TSP는 작은 그래프는 완전탐색, 큰 그래프는 근사 알고리즘 사용.
- 두 알고리즘 모두 그래프 이론의 대표 문제임.

---
