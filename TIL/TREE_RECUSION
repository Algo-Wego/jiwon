# 알고리즘 정리: 트리와 탐색, 재귀

## 1. 트리(Tree)

### 트리란?
- 트리는 계층적(계단식) 자료구조로, 각 노드는 0개 이상의 자식 노드를 가질 수 있습니다.  
- **용어 정리**  
  - **루트(root)**: 트리의 최상단 노드  
  - **노드(node)**: 트리의 각 원소  
  - **리프(leaf)**: 자식이 없는 노드  
  - **서브트리(subtree)**: 특정 노드를 루트로 하는 부분 트리

### 주요 트리 종류
- **이진 트리(Binary Tree)**: 각 노드는 최대 두 개의 자식 노드를 가짐  
- **이진 탐색 트리(BST)**: 왼쪽 자식 < 부모 < 오른쪽 자식 규칙을 따름  
- **균형 트리**: AVL, Red-Black 등 높이 균형을 맞추는 트리도 있음

### 트리의 순회(Tree Traversal)
트리의 모든 노드를 특정 순서로 방문하는 방법입니다.
- **전위 순회(Pre-order)**: 부모 → 왼쪽 → 오른쪽
- **중위 순회(In-order)**: 왼쪽 → 부모 → 오른쪽
- **후위 순회(Post-order)**: 왼쪽 → 오른쪽 → 부모

#### 순회 예시 (자바, 재귀)
```java
void preorder(Node node) {
    if (node == null) return;
    System.out.print(node.val + " ");
    preorder(node.left);
    preorder(node.right);
}
```

### 트리 탐색의 활용
- 효율적인 데이터 검색(BST)
- 계층 구조 표현(파일 시스템, 조직도 등)
- 트리 DP, 트리의 경로 문제 등 다양한 알고리즘 문제에서 활용

---


## 2. 재귀(Recursion)

### 재귀란?
- 함수가 자기 자신을 반복적으로 호출하는 방식  
- 반드시 **종료 조건(Base Case)**이 필요함

#### 재귀 구조의 기본 예시
```java
int factorial(int n) {
    if (n == 0) return 1; // 종료 조건
    return n * factorial(n - 1);
}
```

### 재귀의 특징과 유의점
- 복잡한 문제를 간단하게 분할해 해결할 수 있음
- 반복문으로 대체 가능한 경우도 많으나, 트리/그래프, 백트래킹에서 자주 활용
- 종료 조건이 없으면 무한 루프 및 StackOverflow 발생 위험

### 재귀의 주요 활용
- 트리의 순회와 탐색
- 그래프 탐색(DFS)
- 반복적 문제(피보나치, 팩토리얼)
- 하노이의 탑, 백트래킹(순열, 조합, N-Queen)

---

## 핵심 요약

- **트리**는 계층적 자료구조로, 탐색과 순회(전위/중위/후위)를 통한 문제 풀이에 자주 쓰임  
- **재귀**는 반복적 구조 및 분할 정복 문제, 트리 순회, 백트래킹에 필수적임  
- 각 개념은 서로 밀접하게 연결되어 있으므로, 트리와 탐색을 먼저 익힌 뒤 재귀와 백트래킹을 배우는 것이 효과적임
